@use "../base.scss";
@use "../variables.scss" as *;

/*----Column Callout----*/

.callout[data-callout="column"] {
    /* Removes padding and background colour from the container */
    padding: 0;
    background-color: transparent;
    border: none;
    --columns: 2;
  }
  .callout[data-callout="column"] > .callout-content {
    /* Arranges the content in columns */
    display: grid;
    /* minmax sets the minimum width of a column. Make the columns 'skinnier' by setting 15rem to a smaller number */
    grid-template-columns: repeat(var(--columns), minmax(15rem, 1fr));
    gap: 10px;
  }
  .callout[data-callout="column"] > .callout-title {
    /* Hides the callout title */
    display: none;
  }
  
  .callout[data-callout*=column]:is([data-callout-metadata~=slim-margins],
  [data-callout-metadata~=s-mg]) > .callout-content {
    gap: 2px;
  }
  
  .callout[data-callout*=column][data-callout-metadata~="3"] .callout-content {
    --columns: 3;
  }
  .callout[data-callout*=column][data-callout-metadata~="4"] .callout-content {
    --columns: 4;
  }
  .callout[data-callout*=column][data-callout-metadata~="5"] .callout-content {
    --columns: 5;
  }
  .callout[data-callout*=column][data-callout-metadata~="6"] .callout-content {
    --columns: 6;
  }
  .callout[data-callout*=column][data-callout-metadata~="7"] .callout-content {
    --columns: 7;
  }
  .callout[data-callout*=column][data-callout-metadata~="8"] .callout-content {
    --columns: 8;
  }
  .callout[data-callout*=column][data-callout-metadata~="9"] .callout-content {
    --columns: 9;
  }
  /*flex*/
  .callout[data-callout*=column][data-callout-metadata~=flex] > .callout-content {
    gap: 5px;
    grid-template-columns: none;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
  }
  .callout[data-callout*=column][data-callout-metadata~=flex] > .callout-content .callout {
    flex: 1 1 calc($pageWidth / 2.5);
  }
  .callout[data-callout*=column][data-callout-metadata~=flex][data-callout-metadata~="3"] > .callout-content .callout {
    flex: 1 1 calc($pageWidth / 3.5);
    /* original ITS CSS used (var(--file-line-width), an Obsidian variable for readable line length (the width of the page). Substituted for Quartz SASS variable $pageWidth */
  }
  .callout[data-callout*=column][data-callout-metadata~=flex][data-callout-metadata~=resize] .callout {
    flex: 1 1 auto;
  }
  .callout[data-callout*=column][data-callout-metadata~=flex][data-callout-metadata~=resize] .callout[data-callout-metadata~=wmicro] {
    width: 5%;
  }
  .callout[data-callout*=column][data-callout-metadata~=flex][data-callout-metadata~=resize] .callout[data-callout-metadata~=wtiny] {
    width: 10%;
  }
  .callout[data-callout*=column][data-callout-metadata~=flex][data-callout-metadata~=resize] .callout[data-callout-metadata~=wsmall] {
    width: 20%;
  }
  .callout[data-callout*=column][data-callout-metadata~=flex][data-callout-metadata~=resize] .callout[data-callout-metadata~=ws-med] {
    width: 30%;
  }
  .callout[data-callout*=column][data-callout-metadata~=flex][data-callout-metadata~=resize] .callout[data-callout-metadata~=wmed] {
    width: 40%;
  }
  /*list*/
  .callout[data-callout*=column][data-callout-metadata~=list-global] .callout > .callout-content, .callout[data-callout*=column][data-callout-metadata~=list] > .callout-content {
    grid-template-columns: unset;
  }
  /*list-global is for nesting column lists inside a callout in the column callout*/
  .callout[data-callout*=column][data-callout-metadata~=list-global] .callout > .callout-content > ul, .callout[data-callout*=column][data-callout-metadata~=list] > .callout-content > ul {
    columns: var(--columns);
  }
  .callout[data-callout*=column][data-callout-metadata~=list-global] .callout > .callout-content > ul > li, .callout[data-callout*=column][data-callout-metadata~=list] > .callout-content > ul > li {
    break-inside: avoid;
  }
  .callout[data-callout*=column][data-callout-metadata~=list-global] .callout > .callout-content > ul .list-bullet::after, .callout[data-callout*=column][data-callout-metadata~=list] > .callout-content > ul .list-bullet::after {
    position: relative;
  }
  .callout[data-callout*=column][data-callout-metadata~=list-x] > .callout-content {
    grid-template-columns: unset;
  }
  .callout[data-callout*=column][data-callout-metadata~=list-x] > .callout-content > ul {
    display: grid;
    grid-template-columns: repeat(var(--columns), 1fr);
  }
  
  
  .callout[data-callout*=column]>.callout-content>:first-child:not(.callout) {
    margin-top: 16;
    /* First-child needs a margin-top of 16 to match the margin-top of other grid items - except codeblocks and nested callouts */
  }
